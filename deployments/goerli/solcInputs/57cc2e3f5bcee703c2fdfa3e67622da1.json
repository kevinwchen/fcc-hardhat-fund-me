{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Get funds from users\n// Withdraw funds\n// Set a minimum funding value in USD\n\n// Transactions - Value Transfer\n// Nonce: tx count for the account\n// Gas price: price per unit of gas (in wei)\n// Gas Limit: max gas that this tx can users\n// To: address the tx is sent to\n// Value: amount of wei to send\n// Data: what to sned to the To address\n// v, r, s: components of tx signature\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\n// 837285 before constant MINIMUM_USD\n// 817755 after constant MINIMUM_USD\n\nerror NotOwner();\n\ncontract FundMe {\n  using PriceConverter for uint256;\n\n  uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n  address[] public funders;\n  mapping(address => uint256) public addressToAmountFunded;\n\n  address public immutable i_owner; // variable set only once but not on the same line as initialisation can be set as immutable\n\n  AggregatorV3Interface public priceFeed;\n\n  constructor(address priceFeedAddress) {\n    // constructors are functions that get called immediately after deploying the contract\n    i_owner = msg.sender; // sender of constructor is the address that deployed the contract\n    priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  function fund() public payable {\n    // Want to be able to set a minimum fund amount in USD\n    // 1. How do we send ETH to this contract?\n\n    // require(boolean, revert message)\n    // Reverting undoes any previous action, send remaining gas back\n    require(\n      msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n      \"Didn't send enough!\"\n    ); // 1e18 wei = 1ETH\n    funders.push(msg.sender); // add funder address to funders list\n    addressToAmountFunded[msg.sender] = msg.value; // add funder address to mapping to amount funded\n  }\n\n  function withdraw() public onlyOwner {\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n      address funder = funders[funderIndex]; // get address for each funder on the list\n      addressToAmountFunded[funder] = 0; // reset amount funded to zero\n    }\n\n    // Reset the array\n    funders = new address[](0); // (0) means 0 objects upon declaration\n\n    // Three methods to withdraw funds:\n    // transfer\n    // Need to typecast address to 'payable address' type\n    // payable(msg.sender).transfer(address(this).balance); // 'this' refers to this entire contract\n    // // send\n    // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n    // require(sendSuccess, \"Send failed\"); // will revert transaction if fails\n    // call\n    (bool callSuccess, ) = payable(msg.sender).call{\n      value: address(this).balance\n    }(\"\");\n    require(callSuccess, \"Call failed\");\n  }\n\n  modifier onlyOwner() {\n    // can add modifiers to functions\n    // require(msg.sender == i_owner, \"Sender is not owner\"); // check the withdrawer is the owner of the contract\n\n    // alternative, declare custom errors\n    if (msg.sender != i_owner) {\n      revert NotOwner();\n    }\n\n    _; // underscore represents the code of the function being modified\n  }\n\n  // What happens if someone sends this contract ETH without calling the fund function?\n\n  receive() external payable {\n    fund();\n  }\n\n  fallback() external payable {\n    fund();\n  }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// libraries can't have any state variables or send ether\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\"; // import ABI from github\n\nlibrary PriceConverter {\n  function getPrice(\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n    return uint256(price * 1e10);\n    // uint256 addDecimals = 18 - priceFeed.decimals();\n    // return price * (10 ** addDecimals);\n  }\n\n  function getConversionRate(\n    uint256 ethAmount,\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    uint ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n    return ethAmountInUsd;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}